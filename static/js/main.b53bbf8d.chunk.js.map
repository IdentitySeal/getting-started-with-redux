{"version":3,"sources":["HelloWorld.js","store/store.js","reducers/reducers.js","ButtonGroup.js","actions/actions.js","ReduxApp.js","serviceWorker.js","index.js"],"names":["HelloWorld","props","tech","store","createStore","state","action","type","text","dispatchBtnAction","e","target","dataset","dispatch","setTechnology","ButtonGroup","technologies","map","i","data-tech","key","className","onClick","App","getState","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","render","ReactDOM","StrictMode","document","getElementById","subscribe","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gPAWeA,EATI,SAACC,GAChB,OACI,6BACA,2CAAiBA,EAAMC,Q,cCElBC,EAAQC,aCAN,SAACC,EAAOC,GACnB,OAAQA,EAAOC,MACb,IAAK,iBACH,OAAO,2BACFF,GADL,IAEEH,KAAMI,EAAOE,OAGjB,QACE,OAAOH,KDbM,CACjBH,KAAO,UEcX,SAASO,EAAkBC,GACvB,IAAMF,EAAOE,EAAEC,OAAOC,QAAQV,KAC9BC,EAAMU,SCXmB,SAACL,GAC5B,MACE,CACAD,KAAM,iBACNC,KAAMA,GDOSM,CAAcN,IAGlBO,MAnBK,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAH,OAClB,6BACGA,EAAaC,KAAI,SAACf,EAAMgB,GAAP,OAChB,4BACEC,YAAWjB,EACXkB,IAAG,cAASF,GACZG,UAAU,YACVC,QAASb,GAERP,QEEMqB,E,uKARX,MAAO,CACL,kBAAC,EAAD,CAAaH,IAAK,EAAGJ,aAAc,CAAC,QAAS,MAAO,iBACrD,kBAAC,EAAD,CAAYI,IAAK,EAAGlB,KAAMC,EAAMqB,WAAWtB,Y,GAJ9BuB,aCOZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpC,QACf8B,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCrFjE,IAAMC,EAAS,WAAWC,IAASD,OACjC,kBAAC,IAAME,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,UAG1BJ,IACAhD,EAAMqD,UAAUL,GDGT,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,8BAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,8BAAN,sBAEPhC,IAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAAAC,GACjCA,EAAa+B,aAAahC,MAAK,WAC7BV,OAAOC,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFA0B,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OC1B/BE,K","file":"static/js/main.b53bbf8d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst HelloWorld = (props) =>{\r\n    return (\r\n        <div>\r\n        <h1>Hello World {props.tech}</h1>\r\n    </div>\r\n\r\n    )\r\n    \r\n}\r\nexport default HelloWorld","import {createStore} from 'redux';\r\nimport reducer from \"../reducers/reducers\";\r\n\r\nconst initialState = {\r\n    tech : \"React\"\r\n};\r\n\r\nexport const store = createStore(reducer, initialState);\r\n","// const reducer = (state,action ) => {\r\n//     console.log(action)\r\n//     return state\r\n// }\r\n\r\n// export default reducer\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n      case \"SET_TECHNOLOGY\":\r\n        return {\r\n          ...state,\r\n          tech: action.text\r\n        };\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  };","import React from \"react\";\r\nimport {store} from './store/store';\r\nimport {setTechnology} from './actions/actions'\r\n\r\nconst ButtonGroup = ({ technologies }) => (\r\n  <div>\r\n    {technologies.map((tech, i) => (\r\n      <button\r\n        data-tech={tech}\r\n        key={`btn-${i}`}\r\n        className=\"hello-btn\"\r\n        onClick={dispatchBtnAction}\r\n      >\r\n        {tech}\r\n      </button>\r\n    ))}\r\n  </div>\r\n);\r\nfunction dispatchBtnAction(e) {\r\n    const text = e.target.dataset.tech;\r\n    store.dispatch(setTechnology(text));\r\n  }\r\n\r\nexport default ButtonGroup;\r\n","\r\n//  export function setTechnology (text) {\r\n//     return {\r\n//        type: \"SET_TECHNOLOGY\",\r\n//        text: text\r\n//      }\r\n// }\r\n\r\n\r\nexport const setTechnology = (text) => {\r\n  return(\r\n    {\r\n    type: \"SET_TECHNOLOGY\",\r\n    text: text\r\n  }\r\n  )\r\n}\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport HelloWorld from \"./HelloWorld\";\r\nimport ButtonGroup from \"./ButtonGroup\";\r\nimport { store } from \"./store/store\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return [\r\n      <ButtonGroup key={2} technologies={[\"React\", \"Elm\", \"React-redux\"]} />,\r\n     <HelloWorld key={1} tech={store.getState().tech} />\r\n\r\n    ];\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './ReduxApp';\n\n// import App from './App';\n// import ReduxApp from './components/Redux'\n\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/store';\n\nconst render = function(){ReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)};\n\nrender()\nstore.subscribe(render)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}